"""autogenerated by genpy from buzzmobile/Obstacle.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Obstacle(genpy.Message):
  _md5sum = "7299edc6f983e93379c96ba778e9389e"
  _type = "buzzmobile/Obstacle"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 id
geometry_msgs/Point centroid
geometry_msgs/Polygon shape

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
"""
  __slots__ = ['id','centroid','shape']
  _slot_types = ['uint32','geometry_msgs/Point','geometry_msgs/Polygon']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,centroid,shape

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point()
      if self.shape is None:
        self.shape = geometry_msgs.msg.Polygon()
    else:
      self.id = 0
      self.centroid = geometry_msgs.msg.Point()
      self.shape = geometry_msgs.msg.Polygon()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_I3d.pack(_x.id, _x.centroid.x, _x.centroid.y, _x.centroid.z))
      length = len(self.shape.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape.points:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point()
      if self.shape is None:
        self.shape = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.centroid.x, _x.centroid.y, _x.centroid.z,) = _struct_I3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.shape.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_I3d.pack(_x.id, _x.centroid.x, _x.centroid.y, _x.centroid.z))
      length = len(self.shape.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.shape.points:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.centroid is None:
        self.centroid = geometry_msgs.msg.Point()
      if self.shape is None:
        self.shape = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.centroid.x, _x.centroid.y, _x.centroid.z,) = _struct_I3d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.shape.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.shape.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
_struct_I3d = struct.Struct("<I3d")
