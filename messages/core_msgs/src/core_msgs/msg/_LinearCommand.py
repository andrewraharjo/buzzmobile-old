"""autogenerated by genpy from core_msgs/LinearCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LinearCommand(genpy.Message):
  _md5sum = "b1816b3a073c619227507e3b18a66c8f"
  _type = "core_msgs/LinearCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Bill Mania <bmania@coroware.com>
#
# Message used to send linear movement command to the linear actuator
# via the Phidgets 1065 Motor controller.  This node assumes a linear
# actuator with feedback
#
# speed is a signed integer which specifies the speed in which
# to move the linear actuator 0 indicates full stop. positive
# integers indicate a forward rotation and larger integers
# indicate a higher rotational speed.
#
int16 speed
#
# when at least one of leftSpeed or rightSpeed is non-zero,
# secondsDuration indicates for how many seconds to rotate those
# wheels at the requested speed. when secondsDuration is zero,
# the wheels will be rotated at the requested speed, in the
# requested direction until another request is received.
#
uint16 secondsDuration
#
# the number of seconds over which to effect the change in
# rotational speed from the current speed to the speed requested.
# a value of zero indicates "as fast as possible". the greater
# this value, the greater amount of time taken to change the
# speed.
uint16 acceleration

"""
  __slots__ = ['speed','secondsDuration','acceleration']
  _slot_types = ['int16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed,secondsDuration,acceleration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LinearCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.speed is None:
        self.speed = 0
      if self.secondsDuration is None:
        self.secondsDuration = 0
      if self.acceleration is None:
        self.acceleration = 0
    else:
      self.speed = 0
      self.secondsDuration = 0
      self.acceleration = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_h2H.pack(_x.speed, _x.secondsDuration, _x.acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.speed, _x.secondsDuration, _x.acceleration,) = _struct_h2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_h2H.pack(_x.speed, _x.secondsDuration, _x.acceleration))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.speed, _x.secondsDuration, _x.acceleration,) = _struct_h2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h2H = struct.Struct("<h2H")
